name: "Daily NuGet Vulnerability Scan"

on:
  push:
    branches:
    - none
  workflow_dispatch:

  schedule:
  - cron: '0 8 * * 1-5' # Weekdays 8:00 UTC

jobs:
  scan:
    runs-on: ubuntu-latest
    env:
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
    steps:
    - name: Checkout master branch
      uses: actions/checkout@v3
    - name: Use .NET 8.0 SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - name: ♻️ Restore Nuget Packages
      run: dotnet restore
    - name: "🔓 Check NuGet vulnerabilities"
      run: |
        dotnet list package --vulnerable --include-transitive 2>&1 | tee build.log
        if grep -qi -w -E 'critical|high|moderate|low' build.log; then
          echo "Security vulnerabilities found in the log output"
          exit 1
        else
          echo "No vulnerabilities detected"
        fi
      shell: bash
    - name: ⏳ Check deprecated NuGet packages
      run: |
        dotnet list package --deprecated 2>&1 | tee deprecated.log
        if grep -qi 'has the following deprecated packages' deprecated.log; then
          echo "Deprecated packages detected in output"
          exit 1
        else
          echo "No deprecated packages detected"
        fi
      shell: bash
    - name: "🚨 Security Alert"
      run: |
        $webhookUrl = $env:DISCORD_WEBHOOK_URL
        if (-not [string]::IsNullOrEmpty($webhookUrl)) {
          $repo = $env:GITHUB_REPOSITORY
          $runId = $env:GITHUB_RUN_ID
          $buildUrl = "https://github.com/$repo/actions/runs/$runId"

          # Get branch or ref name (refs/heads/main -> main)
          $ref = $env:GITHUB_REF
          if ($ref -match 'refs/heads/(.+)') { $branch = $matches[1] } else { $branch = $ref }
          $message = "🛡️ **SECURITY ALERT** - Vulnerabilities or deprecated packages detected in the repository!`n📊 **Run:** [#$runId]($buildUrl)`n🔗 **Repository:** [$repo](https://github.com/$repo)`n🌿 **Ref:** $branch"
          $payload = @{ content = $message } | ConvertTo-Json
          Invoke-RestMethod -Uri $webhookUrl -Method Post -Body $payload -ContentType "application/json"
        }
      shell: powershell
      if: failure()
